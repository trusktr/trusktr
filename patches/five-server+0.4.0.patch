diff --git a/node_modules/five-server/client/injected.js b/node_modules/five-server/client/injected.js
index 5f797c6..c1ddc39 100644
--- a/node_modules/five-server/client/injected.js
+++ b/node_modules/five-server/client/injected.js
@@ -1 +1,852 @@
-(()=>{"use strict";const e="__brackets-ld-highlight",t={"background-color":"rgba(0, 162, 255, 0.5)",opacity:0},o={"background-color":"rgb(106, 171, 233)",opacity:.6},n={"background-color":"rgb(156, 221, 156)"},r={"background-color":"rgb(255 ,177 ,95)"},i="rgba(21, 165, 255, 0.85)",s=!0;function a(e){return e.offsetTop+(e.offsetParent?a(e.offsetParent):0)}function l(){}let d,c;const p=function(e){d&&(window.cancelAnimationFrame(d),window.clearTimeout(c)),d=window.requestAnimationFrame(l),c=setTimeout((function(){window.cancelAnimationFrame(d),d=null}),1e3*e)};class f{constructor(e){this.elements=[],this.selector='[data-highlight="true"]',this.trigger=!!e}elementExists(e){let t;for(t in this.elements)if(this.elements[t]===e)return!0;return!1}makeHighlightDiv(a,l){const d=a.getBoundingClientRect(),c=window.document.createElement("div"),f=window.getComputedStyle(a),u=parseFloat(f.getPropertyValue("transition-duration")),g=parseFloat(f.getPropertyValue("animation-duration"));if(u&&p(u),g&&p(g),0===d.width&&0===d.height)return;const h={right:f.getPropertyValue("border-right-width"),left:f.getPropertyValue("border-left-width"),top:f.getPropertyValue("border-top-width"),bottom:f.getPropertyValue("border-bottom-width")},m="border-box"===f.boxSizing;let y=parseFloat(f.width),w=parseFloat(f.height),b=w,v=y;m||(y+=parseFloat(f.paddingLeft)+parseFloat(f.paddingRight),w+=parseFloat(f.paddingTop)+parseFloat(f.paddingBottom),v=y+parseFloat(h.right)+parseFloat(h.left),b=w+parseFloat(h.bottom)+parseFloat(h.top));const x={horizontal:"left, right",vertical:"top, bottom"},F=function(e){const t={};return x.horizontal.indexOf(e)>=0?(t.width=f.getPropertyValue("padding-"+e),t.height=w+"px",t.top=0,m&&(t.height=w-parseFloat(h.top)-parseFloat(h.bottom)+"px")):(t.height=f.getPropertyValue("padding-"+e),t.width=y+"px",t.left=0,m&&(t.width=y-parseFloat(h.left)-parseFloat(h.right)+"px")),t[e]=0,t.position="absolute",t},P=function(e){const t={},o=[];return o.right=parseFloat(f.getPropertyValue("margin-right")),o.top=parseFloat(f.getPropertyValue("margin-top")),o.bottom=parseFloat(f.getPropertyValue("margin-bottom")),o.left=parseFloat(f.getPropertyValue("margin-left")),x.horizontal.indexOf(e)>=0?(t.width=f.getPropertyValue("margin-"+e),t.height=b+o.top+o.bottom+"px",t.top="-"+(o.top+parseFloat(h.top))+"px"):(t.height=f.getPropertyValue("margin-"+e),t.width=v+"px",t.left="-"+h.left),t[e]="-"+(o[e]+parseFloat(h[e]))+"px",t.position="absolute",t},S=function(e){!s||parseInt(e.height,10)<=0||parseInt(e.width,10)<=0?e.display="none":e.display="block"},E=[F("top"),F("right"),F("bottom"),F("left")],k=function(e,t){let o;for(o=0;o<e.length;o++){S(e[o]),e[o].transform="none";const n=window.document.createElement("div");R(Object.assign({},t,e[o]),n.style),c.appendChild(n)}};k([P("top"),P("right"),P("bottom"),P("left")],r),k(E,n),c.className=e,function(e){const t=e.getBoundingClientRect(),o=window.document.body;let n,r;if("static"===window.getComputedStyle(o).position)r=t.left+window.pageXOffset,n=t.top+window.pageYOffset;else{const e=o.getBoundingClientRect();r=t.left-e.left,n=t.top-e.top}}(a);let O=a,T=0,C=0;do{T+=O.offsetLeft,C+=O.offsetTop,O=O.offsetParent}while(O);const H={left:T+"px",top:C+"px",width:y+"px",height:w+"px","z-index":2e6,margin:0,padding:0,position:"absolute","pointer-events":"none","box-shadow":"0 0 1px #fff","box-sizing":f.getPropertyValue("box-sizing"),"border-right":f.getPropertyValue("border-right"),"border-left":f.getPropertyValue("border-left"),"border-top":f.getPropertyValue("border-top"),"border-bottom":f.getPropertyValue("border-bottom"),transform:f.getPropertyValue("transform"),"transform-origin":f.getPropertyValue("transform-origin"),"border-color":i},V=Object.assign({},H),L=t,M=o;function R(e,t){let o;for(o in e)t.setProperty(o,e[o])}R(V,c.style),R(l?L:M,c.style),l&&(R({"transition-property":"opacity, background-color, transform","transition-duration":"300ms, 2.3s"},c.style),window.setTimeout((function(){R(M,c.style)}),20)),window.document.body.appendChild(c)}add(e,t){if(!this.elementExists(e)&&e!==window.document){if(this.trigger,(!window.event||window.event instanceof MessageEvent)&&!function(e){const t=e.getBoundingClientRect(),o=window.document.documentElement;return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||o.clientHeight)&&t.right<=(window.innerWidth||o.clientWidth)}(e)){let t=a(e);t&&(t-=window.innerHeight/2,window.scrollTo(0,t))}this.elements.push(e),this.makeHighlightDiv(e,t)}}clear(){let t;const o=window.document.querySelectorAll("."+e),n=window.document.body;for(t=0;t<o.length;t++)n.removeChild(o[t]);if(this.trigger)for(t=0;t<this.elements.length;t++)this.elements[t];this.elements=[]}redraw(){let e,t;for(t=this.selector?window.document.querySelectorAll(this.selector):this.elements.slice(0),this.clear(),e=0;e<t.length;e++)this.add(t[e],!1)}}var u=function(e,t,o,n){return new(o||(o=Promise))((function(r,i){function s(e){try{l(n.next(e))}catch(e){i(e)}}function a(e){try{l(n.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(s,a)}l((n=n.apply(e,t||[])).next())}))};let g;const h=!!document.body&&document.body.hasAttribute("data-server-no-reload");h&&console.info("[Five Server] Reload disabled due to 'data-server-no-reload' attribute on BODY element"),"WebSocket"in window&&!h&&window.addEventListener("load",(()=>{console.log("[Five Server] connecting...");const e=document.querySelector('[data-id="five-server"]'),t=new URL(e.src).pathname.split("/").slice(0,-1).join("/"),o=`${n=`${"http:"===window.location.protocol?"ws://":"wss://"}${new URL(e.src).host}${t}`,n.replace(/\/+$/g,"")}/${(e=>e.replace(/^\/+/g,""))("fsws")}`;var n;const r=e.getAttribute("data-inject-body");r&&"true"===r.toString()&&(g=document.body?document.body.cloneNode(!0):void 0);let i=null;const s=new f(!0);s.redraw(),window.addEventListener("resize",(()=>{s.redraw()}));const a="[Five Server] connected.";let l,d=1e3,c=0,p="";const h=(e,t,o={})=>{const n=JSON.stringify({message:e,type:t,options:o});if(p===n&&"css updated"!==e)return;p=n;let r=document.getElementById("fiveserver-info-wrapper");r&&r.remove();const{time:s=3,animation:a=!0}=o;r=document.createElement("div"),r.id="fiveserver-info-wrapper",r.classList.add(`fiveserver-info-wrapper_${t}`),r.style.zIndex="100",r.style.display="flex",r.style.justifyContent="center",r.style.position="fixed",r.style.top="flex",r.style.left="50%",r.style.transform="translateX(-50%)",r.style.width="100%",r.style.maxWidth="80%";const l=document.createElement("div");l.id="fiveserver-info",l.style.fontSize="16px",l.style.fontFamily="Arial, Helvetica, sans-serif",l.style.color="white",l.style.backgroundColor="black",l.style.padding="4px 12px",l.style.borderRadius="4px",l.style.whiteSpace="pre-wrap",r.appendChild(l),document.body.appendChild(r),i&&(clearTimeout(i),i=null),i=setTimeout((()=>{r&&r.isConnected&&r.remove()}),1e3*s),"error"===t?(r.style.top="4px",r.style.animation="",l.style.color="black",l.style.backgroundColor="red"):a?(r.style.top="-40px",r.style.animation=`fiveserverInfoPopup ${s}s forwards`):(r.style.top="4px",r.style.animation=""),"success"===t?(l.style.color="#498d76",l.style.backgroundColor="#00ffa9"):"info"===t&&(l.style.color="#d2e1f0",l.style.backgroundColor="#2996ff"),l.innerHTML=e.replace(/</gm,"&lt;")},m=(e,...t)=>{l&&1===(null==l?void 0:l.readyState)&&l.send(JSON.stringify({console:{type:e,message:t}}))},y=e=>{const t=document.getElementsByTagName("head")[0];let o=Array.from(document.getElementsByTagName("link"));o=o.filter((e=>/\.css/gm.test(e.href)||"stylesheet"==e.rel.toLowerCase()));for(let e=0;e<o.length;++e){const n=o[e],r=n.cloneNode(!0),i=r.href.replace(/(&|\?)_cacheOverride=\d+/,"");r.href=`${i}${i.indexOf("?")>=0?"&":"?"}_cacheOverride=${(new Date).valueOf()}`,r.onload=()=>{setTimeout((()=>n.remove()),0)},t.appendChild(r)}o.length>0&&e&&h("css updated","info")};let w,b="";const v=new DOMParser;let x=!1;const F=e=>{if("HIDE"===e||"HIDE_MESSAGE"===e||"HIDE_MESSAGES"===e){const e=document.getElementById("fiveserver-info-wrapper");e&&e.remove()}else h(e,"info",{animation:!1})},P=()=>{l=new WebSocket(o),l.onmessage=function(t){if(d=1e3,c=0,"reload"===t.data)window.location.reload();else if("refreshcss"===t.data)y(!0);else if("refreshcss-silent"===t.data)y(!1);else if("connected"===t.data){console.log(a);const e=document.querySelector('[data-id="five-server"]');e&&e.dispatchEvent(new Event("connected"))}else if("initRemoteLogs"===t.data)(()=>{const e=console.log;console.log=function(...t){t[0]===a?h("connected","success"):m("log",...t),e.apply(console,t)};const t=console.warn;console.warn=function(...e){m("warn",...e),t.apply(console,e)};const o=console.error;console.error=function(...e){m("error",...e),o.apply(console,e)}})();else{const n=JSON.parse(t.data);n.navigate&&window.location.replace(n.navigate),n.body&&n.hot?(t=>{u(void 0,void 0,void 0,(function*(){if(""===b&&(yield(b="loading",new Promise((t=>{const o=new URL(e.src).pathname.split("/").slice(0,-1).join("/"),n=`//${new URL(e.src).host}${o}/fiveserver/scripts/diffDOM/diffDOM.js`,r=document.createElement("script");r.type="text/javascript",r.src=n,r.onload=()=>{setTimeout((()=>{w=new diffDOM.DiffDOM,b="ready",t()}))},document.getElementsByTagName("head")[0].appendChild(r)})))),"ready"===b)try{const e=g,o=v.parseFromString(t,"text/html").querySelector("body"),n=document.createElement("body");if(n.innerHTML=t,o&&o.attributes.length>0)for(let e=0;e<o.attributes.length;e++){const t=o.attributes.item(e);if(t){const e=document.createAttribute(t.name);e.value=t.value,n.attributes.setNamedItem(e)}}const r=w.diff(e,n),i=document.body.cloneNode(!0);if(w.apply(i,r)&&w.apply(document.body,r)){g=n,x&&(x=!1,F("HIDE"));const e=document.querySelector('[data-highlight="true"]');if(e){const t=e=>e.offsetTop+(e.offsetParent?t(e.offsetParent):0),o=t(e)-window.innerHeight/2;window.scrollTo(0,o)}}}catch(e){x=!0,F("Having issues parsing the DOM.\nPlease verify that your HTML is valid...")}}))})(n.body):n.body&&(o=n.body,document.body.innerHTML=o),n.messages&&(e=>{F(e.join("\n\n"))})(n.messages),n.message&&F(n.message),n.body&&s.redraw()}var o},l.onopen=function(){if(c>0)return void window.location.reload();const e=document.querySelectorAll("script");for(let t=0;t<e.length;t++){const o=e[t];o.dataset&&o.dataset.file&&l.send(JSON.stringify({file:o.dataset.file}))}const t=document.createElement("style");t.innerHTML='      \n      /* Injected by five-server */\n      /*[data-highlight="true"] {\n        border: 1px rgb(90,170,255) solid !important;\n        background-color: rgba(155,215,255,0.5);\n        animation: fadeOutHighlight 1s forwards 0.5s;\n      }\n      img[data-highlight="true"] {\n        filter: sepia(100%) hue-rotate(180deg) saturate(200%);\n        animation: fadeOutHighlightIMG 0.5s forwards 0.5s;\n      }*/\n      @keyframes fadeOutHighlight {\n        from {background-color: rgba(155,215,255,0.5);}\n        to {background-color: rgba(155,215,255,0);}\n      }      \n      @keyframes fadeOutHighlightIMG {\n        0% {filter: sepia(100%) hue-rotate(180deg) saturate(200%);}\n        33% {filter: sepia(66%) hue-rotate(180deg) saturate(100%);}\n        50% {filter: sepia(50%) hue-rotate(90deg) saturate(50%);}\n        66% {filter: sepia(33%) hue-rotate(0deg) saturate(100%);}\n        100% {filter: sepia(0%) hue-rotate(0deg) saturate(100%);}\n      }\n      @keyframes fiveserverInfoPopup {\n        0%   {top:-40px;}\n        15%  {top:4px;}\n        85%  {top:4px;}\n        100% {top:-40px;}\n      }\n      /*smaller*/\n      @media (max-width: 640px) {\n        #fiveserver-info-wrapper {\n          max-width: 98%;\n        }\n        #fiveserver-info {\n          border-radius: 0px;\n        }      \n      }\n\n      ',document.head.appendChild(t)},l.onclose=function(e){setTimeout((function(){h("lost connection to dev server","error")}),300),0===c&&console.log("Socket is closed. Reconnect will be attempted in 1 second.",e.reason),setTimeout((function(){c++,c>1&&console.log("connecting..."),c<=25&&P(),d=Math.floor(1.1*d)}),d)},l.onerror=function(e){l.close()}};let S=0;const E=()=>{if(S>10)return console.error("[Five Server] status check failed"),console.log("[Five Server] browser reloads in 5 seconds"),void setTimeout((()=>{window.location.reload()}),5e3);console.log("[Five Server] status check..."),setTimeout((()=>{k()}),1e3)},k=()=>u(void 0,void 0,void 0,(function*(){S++;const t=`${new URL(e.src).protocol}//${new URL(e.src).host}${new URL(e.src).pathname.split("/").slice(0,-1).join("/")}/fiveserver/status`;try{const e=yield fetch(t),o=yield e.json();o&&o.status&&"online"===o.status?(P(),S=0):E()}catch(e){E()}}));k()}))})();
\ No newline at end of file
+const removeLeadingSlash = (str) => {
+  return str.replace(/^\/+/g, '')
+}
+
+const removeTrailingSlash = (str) => {
+  return str.replace(/\/+$/g, '')
+}
+
+/** Just like path.join() (for url) */
+const appendPathToUrl = (url, append) => {
+  return `${removeTrailingSlash(url)}/${removeLeadingSlash(append)}`
+}
+
+/* eslint-disable prefer-object-spread */
+/* eslint-disable prefer-template */
+
+/**
+ * @copyright
+ * Copyright (c) 2012 - present Adobe Systems Incorporated. All rights reserved. (https://github.com/adobe)
+ * Copyright (c) 2021 Yannick Deubel (https://github.com/yandeu)
+ *
+ * @license {@link https://github.com/yandeu/five-server/blob/main/LICENSE LICENSE}
+ *
+ * @description
+ * copied from https://github.com/adobe/brackets/blob/master/src/LiveDevelopment/Agents/RemoteFunctions.js
+ * previously licensed under MIT (https://github.com/adobe/brackets/blob/master/LICENSE)
+ */
+
+let _remoteHighlight
+const HIGHLIGHT_CLASS_NAME = '__brackets-ld-highlight'
+
+const config = {
+  experimental: false, // enable experimental features
+  debug: true, // enable debug output and helpers
+  autoConnect: false, // go live automatically after startup?
+  highlight: true, // enable highlighting?
+  highlightConfig: {
+    // the highlight configuration for the Inspector
+    borderColor: { r: 255, g: 229, b: 153, a: 0.66 },
+    contentColor: { r: 111, g: 168, b: 220, a: 0.55 },
+    marginColor: { r: 246, g: 178, b: 107, a: 0.66 },
+    paddingColor: { r: 147, g: 196, b: 125, a: 0.66 },
+    showInfo: true
+  },
+  remoteHighlight: {
+    animateStartValue: {
+      'background-color': 'rgba(0, 162, 255, 0.5)',
+      opacity: 0
+    },
+    animateEndValue: {
+      'background-color': 'rgb(106, 171, 233)', //'rgba(0, 162, 255, 0)',
+      opacity: 0.6
+    },
+    paddingStyling: {
+      //'border-width': '1px',
+      //'border-style': 'dashed',
+      //'border-color': 'rgba(0, 162, 255, 0.5)',
+      'background-color': 'rgb(156, 221, 156)'
+    },
+    marginStyling: {
+      'background-color': 'rgb(255 ,177 ,95)' // 'rgba(21, 165, 255, 0.58)'
+    },
+    borderColor: 'rgba(21, 165, 255, 0.85)',
+    showPaddingMargin: true
+  }
+}
+
+// Checks if the element is in Viewport in the client browser
+function isInViewport(element) {
+  const rect = element.getBoundingClientRect()
+  const html = window.document.documentElement
+  return (
+    rect.top >= 0 &&
+    rect.left >= 0 &&
+    rect.bottom <= (window.innerHeight || html.clientHeight) &&
+    rect.right <= (window.innerWidth || html.clientWidth)
+  )
+}
+
+// set an event on a element
+function _trigger(element, name, value, autoRemove) {
+  // MOD(yandeu): Do not automatically remove the highlight.
+  /*
+  const key = 'data-ld-' + name
+  if (value !== undefined && value !== null) {
+    element.setAttribute(key, value)
+    if (autoRemove) {
+      window.setTimeout(element.removeAttribute.bind(element, key))
+    }
+  } else {
+    element.removeAttribute(key)
+  }
+  */
+}
+
+// compute the screen offset of an element
+function _screenOffset(element) {
+  const elemBounds = element.getBoundingClientRect(),
+    body = window.document.body
+  let offsetTop, offsetLeft
+
+  if (window.getComputedStyle(body).position === 'static') {
+    offsetLeft = elemBounds.left + window.pageXOffset
+    offsetTop = elemBounds.top + window.pageYOffset
+  } else {
+    const bodyBounds = body.getBoundingClientRect()
+    offsetLeft = elemBounds.left - bodyBounds.left
+    offsetTop = elemBounds.top - bodyBounds.top
+  }
+  return { left: offsetLeft, top: offsetTop }
+}
+
+// returns the distance from the top of the closest relatively positioned parent element
+function getDocumentOffsetTop(element) {
+  return element.offsetTop + (element.offsetParent ? getDocumentOffsetTop(element.offsetParent) : 0)
+}
+
+// redraw active highlights
+function redrawHighlights() {
+  if (_remoteHighlight) {
+    _remoteHighlight.redraw()
+  }
+}
+
+let req, timeout
+const animateHighlight = function (time) {
+  if (req) {
+    window.cancelAnimationFrame(req)
+    window.clearTimeout(timeout)
+  }
+  req = window.requestAnimationFrame(redrawHighlights)
+
+  timeout = setTimeout(function () {
+    window.cancelAnimationFrame(req)
+    req = null
+  }, time * 1000)
+}
+
+class Highlight {
+  trigger
+  elements = []
+  selector = '[data-highlight="true"]'
+
+  constructor(trigger) {
+    this.trigger = !!trigger
+  }
+
+  elementExists(element) {
+    let i
+    for (i in this.elements) {
+      if (this.elements[i] === element) {
+        return true
+      }
+    }
+    return false
+  }
+
+  makeHighlightDiv(element, doAnimation) {
+    const elementBounds = element.getBoundingClientRect(),
+      highlight = window.document.createElement('div'),
+      elementStyling = window.getComputedStyle(element),
+      transitionDuration = parseFloat(elementStyling.getPropertyValue('transition-duration')),
+      animationDuration = parseFloat(elementStyling.getPropertyValue('animation-duration'))
+
+    if (transitionDuration) {
+      animateHighlight(transitionDuration)
+    }
+
+    if (animationDuration) {
+      animateHighlight(animationDuration)
+    }
+
+    // Don't highlight elements with 0 width & height
+    if (elementBounds.width === 0 && elementBounds.height === 0) {
+      return
+    }
+
+    const realElBorder = {
+      right: elementStyling.getPropertyValue('border-right-width'),
+      left: elementStyling.getPropertyValue('border-left-width'),
+      top: elementStyling.getPropertyValue('border-top-width'),
+      bottom: elementStyling.getPropertyValue('border-bottom-width')
+    }
+
+    const borderBox = elementStyling.boxSizing === 'border-box'
+
+    let innerWidth = parseFloat(elementStyling.width),
+      innerHeight = parseFloat(elementStyling.height),
+      outerHeight = innerHeight,
+      outerWidth = innerWidth
+
+    if (!borderBox) {
+      innerWidth += parseFloat(elementStyling.paddingLeft) + parseFloat(elementStyling.paddingRight)
+      innerHeight += parseFloat(elementStyling.paddingTop) + parseFloat(elementStyling.paddingBottom)
+      ;(outerWidth = innerWidth + parseFloat(realElBorder.right) + parseFloat(realElBorder.left)),
+        (outerHeight = innerHeight + parseFloat(realElBorder.bottom) + parseFloat(realElBorder.top))
+    }
+
+    const visualizations = {
+      horizontal: 'left, right',
+      vertical: 'top, bottom'
+    }
+
+    const drawPaddingRect = function (side) {
+      const elStyling = {}
+
+      if (visualizations.horizontal.indexOf(side) >= 0) {
+        elStyling['width'] = elementStyling.getPropertyValue('padding-' + side)
+        elStyling['height'] = innerHeight + 'px'
+        elStyling['top'] = 0
+
+        if (borderBox) {
+          elStyling['height'] = innerHeight - parseFloat(realElBorder.top) - parseFloat(realElBorder.bottom) + 'px'
+        }
+      } else {
+        elStyling['height'] = elementStyling.getPropertyValue('padding-' + side)
+        elStyling['width'] = innerWidth + 'px'
+        elStyling['left'] = 0
+
+        if (borderBox) {
+          elStyling['width'] = innerWidth - parseFloat(realElBorder.left) - parseFloat(realElBorder.right) + 'px'
+        }
+      }
+
+      elStyling[side] = 0
+      elStyling['position'] = 'absolute'
+
+      return elStyling
+    }
+
+    const drawMarginRect = function (side) {
+      const elStyling = {}
+
+      const margin = []
+      margin['right'] = parseFloat(elementStyling.getPropertyValue('margin-right'))
+      margin['top'] = parseFloat(elementStyling.getPropertyValue('margin-top'))
+      margin['bottom'] = parseFloat(elementStyling.getPropertyValue('margin-bottom'))
+      margin['left'] = parseFloat(elementStyling.getPropertyValue('margin-left'))
+
+      if (visualizations['horizontal'].indexOf(side) >= 0) {
+        elStyling['width'] = elementStyling.getPropertyValue('margin-' + side)
+        elStyling['height'] = outerHeight + margin['top'] + margin['bottom'] + 'px'
+        elStyling['top'] = '-' + (margin['top'] + parseFloat(realElBorder.top)) + 'px'
+      } else {
+        elStyling['height'] = elementStyling.getPropertyValue('margin-' + side)
+        elStyling['width'] = outerWidth + 'px'
+        elStyling['left'] = '-' + realElBorder.left
+      }
+
+      elStyling[side] = '-' + (margin[side] + parseFloat(realElBorder[side])) + 'px'
+      elStyling['position'] = 'absolute'
+
+      return elStyling
+    }
+
+    const setVisibility = function (el) {
+      if (!config.remoteHighlight.showPaddingMargin || parseInt(el.height, 10) <= 0 || parseInt(el.width, 10) <= 0) {
+        el.display = 'none'
+      } else {
+        el.display = 'block'
+      }
+    }
+
+    const paddingVisualizations = [
+      drawPaddingRect('top'),
+      drawPaddingRect('right'),
+      drawPaddingRect('bottom'),
+      drawPaddingRect('left')
+    ]
+
+    const marginVisualizations = [
+      drawMarginRect('top'),
+      drawMarginRect('right'),
+      drawMarginRect('bottom'),
+      drawMarginRect('left')
+    ]
+
+    const setupVisualizations = function (arr, config) {
+      let i
+      for (i = 0; i < arr.length; i++) {
+        setVisibility(arr[i])
+
+        // Applies to every visualisationElement (padding or margin div)
+        arr[i]['transform'] = 'none'
+        const el = window.document.createElement('div'),
+          styles = Object.assign({}, config, arr[i])
+
+        _setStyleValues(styles, el.style)
+
+        highlight.appendChild(el)
+      }
+    }
+
+    setupVisualizations(marginVisualizations, config.remoteHighlight.marginStyling)
+    setupVisualizations(paddingVisualizations, config.remoteHighlight.paddingStyling)
+
+    highlight.className = HIGHLIGHT_CLASS_NAME
+
+    const offset = _screenOffset(element)
+
+    let el = element,
+      offsetLeft = 0,
+      offsetTop = 0
+
+    // Probably the easiest way to get elements position without including transform
+    do {
+      offsetLeft += el.offsetLeft
+      offsetTop += el.offsetTop
+      el = el.offsetParent
+    } while (el)
+
+    const stylesToSet = {
+      left: offsetLeft + 'px',
+      top: offsetTop + 'px',
+      width: innerWidth + 'px',
+      height: innerHeight + 'px',
+      'z-index': 2000000,
+      margin: 0,
+      padding: 0,
+      position: 'absolute',
+      'pointer-events': 'none',
+      'box-shadow': '0 0 1px #fff',
+      'box-sizing': elementStyling.getPropertyValue('box-sizing'),
+      'border-right': elementStyling.getPropertyValue('border-right'),
+      'border-left': elementStyling.getPropertyValue('border-left'),
+      'border-top': elementStyling.getPropertyValue('border-top'),
+      'border-bottom': elementStyling.getPropertyValue('border-bottom'),
+      transform: elementStyling.getPropertyValue('transform'),
+      'transform-origin': elementStyling.getPropertyValue('transform-origin'),
+      'border-color': config.remoteHighlight.borderColor
+    }
+
+    const mergedStyles = Object.assign({}, stylesToSet)
+
+    const animateStartValues = config.remoteHighlight.animateStartValue
+
+    const animateEndValues = config.remoteHighlight.animateEndValue
+
+    const transitionValues = {
+      'transition-property': 'opacity, background-color, transform',
+      'transition-duration': '300ms, 2.3s'
+    }
+
+    function _setStyleValues(styleValues, obj) {
+      let prop
+
+      for (prop in styleValues) {
+        obj.setProperty(prop, styleValues[prop])
+      }
+    }
+
+    _setStyleValues(mergedStyles, highlight.style)
+    _setStyleValues(doAnimation ? animateStartValues : animateEndValues, highlight.style)
+
+    if (doAnimation) {
+      _setStyleValues(transitionValues, highlight.style)
+
+      window.setTimeout(function () {
+        _setStyleValues(animateEndValues, highlight.style)
+      }, 20)
+    }
+
+    window.document.body.appendChild(highlight)
+  }
+
+  add(element, doAnimation) {
+    if (this.elementExists(element) || element === window.document) {
+      return
+    }
+    if (this.trigger) {
+      _trigger(element, 'highlight', 1)
+    }
+
+    if ((!window.event || window.event instanceof MessageEvent) && !isInViewport(element)) {
+      let top = getDocumentOffsetTop(element)
+      if (top) {
+        top -= window.innerHeight / 2
+        window.scrollTo(0, top)
+      }
+    }
+    this.elements.push(element)
+
+    this.makeHighlightDiv(element, doAnimation)
+  }
+
+  clear() {
+    let i
+    const highlights = window.document.querySelectorAll('.' + HIGHLIGHT_CLASS_NAME),
+      body = window.document.body
+
+    for (i = 0; i < highlights.length; i++) {
+      body.removeChild(highlights[i])
+    }
+
+    if (this.trigger) {
+      for (i = 0; i < this.elements.length; i++) {
+        _trigger(this.elements[i], 'highlight', 0)
+      }
+    }
+
+    this.elements = []
+  }
+
+  redraw() {
+    let i, highlighted
+
+    // When redrawing a selector-based highlight, run a new selector
+    // query to ensure we have the latest set of elements to highlight.
+    if (this.selector) {
+      highlighted = window.document.querySelectorAll(this.selector)
+    } else {
+      highlighted = this.elements.slice(0)
+    }
+
+    this.clear()
+    for (i = 0; i < highlighted.length; i++) {
+      this.add(highlighted[i], false)
+    }
+  }
+}
+
+
+// clone the current state of the body before any javascript
+// manipulates it inside window.addEventListener('load', (...))
+let _internalDOMBody
+
+const block = document.body ? document.body.hasAttribute('data-server-no-reload') : false
+
+if (block) {
+  console.info("[Five Server] Reload disabled due to 'data-server-no-reload' attribute on BODY element")
+}
+if ('WebSocket' in window && !block) {
+  window.addEventListener('load', () => {
+    console.log('[Five Server] connecting...')
+
+    const script = document.querySelector('[data-id="five-server"]') 
+
+    const baseurl = new URL(script.src).pathname.split('/').slice(0, -1).join('/')
+    const protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://'
+    const address = appendPathToUrl(`${protocol}${new URL(script.src).host}${baseurl}`, 'fsws')
+
+    // check if we need to clone the body for the "injectBody" feature or not
+    const optionsInjectBody = script.getAttribute('data-inject-body')
+    if (optionsInjectBody && optionsInjectBody.toString() === 'true')
+      _internalDOMBody = document.body ? document.body.cloneNode(true) : undefined
+
+    let timer = null
+
+    const highlight = new Highlight(true)
+    highlight.redraw()
+    window.addEventListener('resize', () => {
+      highlight.redraw()
+    })
+
+    const CONNECTED_MSG = '[Five Server] connected.'
+    const MAX_ATTEMPTS = 25
+    let wait = 1000
+    let attempts = 0
+    let socket
+
+    let lastPopUp = ''
+    const popup = (
+      message,
+      type,
+      options = {}
+    ) => {
+      const str = JSON.stringify({ message, type, options })
+
+      // block identical popups, except "css update"
+      if (lastPopUp === str && message !== 'css updated') return
+      lastPopUp = str
+
+      let wrapper = document.getElementById('fiveserver-info-wrapper')
+      if (wrapper) wrapper.remove()
+
+      const { time = 3, animation = true } = options
+
+      wrapper = document.createElement('div')
+      wrapper.id = 'fiveserver-info-wrapper'
+      wrapper.classList.add(`fiveserver-info-wrapper_${type}`)
+
+      wrapper.style.zIndex = '100'
+      wrapper.style.display = 'flex'
+      wrapper.style.justifyContent = 'center'
+      wrapper.style.position = 'fixed'
+      wrapper.style.top = 'flex'
+
+      wrapper.style.left = '50%'
+      wrapper.style.transform = 'translateX(-50%)'
+      wrapper.style.width = '100%'
+      wrapper.style.maxWidth = '80%'
+
+      const el = document.createElement('div')
+      el.id = 'fiveserver-info'
+      el.style.fontSize = '16px'
+      el.style.fontFamily = 'Arial, Helvetica, sans-serif'
+      el.style.color = 'white'
+      el.style.backgroundColor = 'black'
+
+      el.style.padding = '4px 12px'
+      el.style.borderRadius = '4px'
+      el.style.whiteSpace = 'pre-wrap'
+
+      wrapper.appendChild(el)
+
+      document.body.appendChild(wrapper)
+
+      // remove popup from DOM after 'time'
+      if (timer) {
+        clearTimeout(timer)
+        timer = null
+      }
+      timer = setTimeout(() => {
+        if (wrapper && wrapper.isConnected) wrapper.remove()
+      }, time * 1000)
+
+      if (type === 'error') {
+        wrapper.style.top = '4px'
+        wrapper.style.animation = ''
+
+        el.style.color = 'black'
+        el.style.backgroundColor = 'red'
+      } else {
+        if (animation) {
+          wrapper.style.top = '-40px'
+          wrapper.style.animation = `fiveserverInfoPopup ${time}s forwards`
+        } else {
+          wrapper.style.top = '4px'
+          wrapper.style.animation = ''
+        }
+      }
+
+      if (type === 'success') {
+        el.style.color = '#498d76'
+        el.style.backgroundColor = '#00ffa9'
+      } else if (type === 'info') {
+        el.style.color = '#d2e1f0'
+        el.style.backgroundColor = '#2996ff'
+      }
+      el.innerHTML = message.replace(/</gm, '&lt;')
+    }
+
+    const send = (type, ...message) => {
+      if (socket && socket?.readyState === 1) {
+        socket.send(JSON.stringify({ console: { type, message } }))
+      }
+    }
+
+    const overwriteLogs = () => {
+      // log
+      const oldLog = console.log
+      console.log = function (...message) {
+        if (message[0] === CONNECTED_MSG) {
+          popup('connected', 'success')
+        } else {
+          send('log', ...message)
+        }
+        oldLog.apply(console, message)
+      }
+
+      // warn
+      const oldWarn = console.warn
+      console.warn = function (...message) {
+        send('warn', ...message)
+        oldWarn.apply(console, message)
+      }
+
+      // error
+      const oldError = console.error
+      console.error = function (...message) {
+        send('error', ...message)
+        oldError.apply(console, message)
+      }
+    }
+
+    const refreshCSS = (showPopup) => {
+      const head = document.getElementsByTagName('head')[0]
+
+      let sheets = Array.from(document.getElementsByTagName('link'))
+      sheets = sheets.filter(sheet => /\.css/gm.test(sheet.href) || sheet.rel.toLowerCase() == 'stylesheet')
+
+      for (let i = 0; i < sheets.length; ++i) {
+        const el = sheets[i]
+
+        const newEl = el.cloneNode(true) 
+
+        // changing the href of the css file will make the browser refetch it
+        const url = newEl.href.replace(/(&|\?)_cacheOverride=\d+/, '')
+        newEl.href = `${url}${url.indexOf('?') >= 0 ? '&' : '?'}_cacheOverride=${new Date().valueOf()}`
+
+        newEl.onload = () => {
+          setTimeout(() => el.remove(), 0)
+        }
+
+        head.appendChild(newEl)
+      }
+
+      if (sheets.length > 0 && showPopup) popup('css updated', 'info')
+    }
+
+    const injectBody = body => {
+      document.body.innerHTML = body
+    }
+
+    let _diffDOMStatus = ''
+    let _dd
+
+    const addDiffDOM = () => {
+      _diffDOMStatus = 'loading'
+      return new Promise(resolve => {
+        const baseurl = new URL(script.src).pathname.split('/').slice(0, -1).join('/')
+        const url = `//${new URL(script.src).host}${baseurl}/fiveserver/scripts/diffDOM/diffDOM.js`
+        const s = document.createElement('script')
+        s.type = 'text/javascript'
+        s.src = url
+        s.onload = () => {
+          setTimeout(() => {
+            _dd = new diffDOM.DiffDOM()
+            _diffDOMStatus = 'ready'
+            resolve()
+          })
+        }
+        document.getElementsByTagName('head')[0].appendChild(s)
+      })
+    }
+
+    const domParser = new DOMParser()
+    let diffError = false
+    const updateBody = async (d) => {
+      if (_diffDOMStatus === '') await addDiffDOM()
+
+      if (_diffDOMStatus === 'ready') {
+        try {
+          const body = _internalDOMBody
+
+          const newBody = domParser.parseFromString(d, 'text/html').querySelector('body')
+
+          const tmp = document.createElement('body')
+          tmp.innerHTML = d
+
+          // copy all attributes
+          if (newBody) {
+            if (newBody.attributes.length > 0)
+              for (let i = 0; i < newBody.attributes.length; i++) {
+                const attr = newBody.attributes.item(i)
+                if (attr) {
+                  const newAttr = document.createAttribute(attr.name)
+                  newAttr.value = attr.value
+                  tmp.attributes.setNamedItem(newAttr)
+                }
+              }
+          }
+
+          const diff = _dd.diff(body, tmp)
+
+          const testBody = document.body.cloneNode(true)
+
+          const testSuccess = _dd.apply(testBody, diff)
+          if (testSuccess) {
+            const success = _dd.apply(document.body, diff)
+
+            if (success) {
+              _internalDOMBody = tmp
+
+              if (diffError) {
+                diffError = false
+                appendMessage('HIDE')
+              }
+
+              // scroll element into view (center of page)
+              const el = document.querySelector(`[data-highlight="true"]`)
+              if (el) {
+                const documentOffsetTop = el => {
+                  return el.offsetTop + (el.offsetParent ? documentOffsetTop(el.offsetParent) : 0)
+                }
+                const pos = documentOffsetTop(el) - window.innerHeight / 2
+                window.scrollTo(0, pos)
+              }
+            }
+          }
+        } catch (error) {
+          diffError = true
+          appendMessage('Having issues parsing the DOM.\nPlease verify that your HTML is valid...')
+        }
+      }
+    }
+
+    const appendMessages = (msg) => {
+      appendMessage(msg.join('\n\n'))
+    }
+
+    const appendMessage = (msg) => {
+      if (msg === 'HIDE' || msg === 'HIDE_MESSAGE' || msg === 'HIDE_MESSAGES') {
+        const wrapper = document.getElementById('fiveserver-info-wrapper')
+        if (wrapper) wrapper.remove()
+      } else {
+        popup(msg, 'info', { animation: false })
+      }
+    }
+
+    const connect = () => {
+      socket = new WebSocket(address)
+
+      socket.onmessage = function (msg) {
+        wait = 1000
+        attempts = 0
+
+        if (msg.data === 'reload') window.location.reload()
+        else if (msg.data === 'refreshcss') refreshCSS(true)
+        else if (msg.data === 'refreshcss-silent') refreshCSS(false)
+        else if (msg.data === 'connected') {
+          console.log(CONNECTED_MSG)
+          // dispatch "connected" event when client is connected
+          const script = document.querySelector('[data-id="five-server"]')
+          if (script) script.dispatchEvent(new Event('connected'))
+        } else if (msg.data === 'initRemoteLogs') overwriteLogs()
+        else {
+          const d = JSON.parse(msg.data)
+          if (d.navigate) window.location.replace(d.navigate)
+          // hot body injection
+          if (d.body && d.hot) updateBody(d.body)
+          // simple body replacement
+          else if (d.body) injectBody(d.body)
+
+          // message and messages 🤣
+          if (d.messages) appendMessages(d.messages)
+          if (d.message) appendMessage(d.message)
+
+          // redraw the highlight on body update
+          if (d.body) highlight.redraw()
+        }
+      }
+      socket.onopen = function () {
+        // reload page on successful reconnection
+        if (attempts > 0) {
+          window.location.reload()
+          return
+        }
+
+        const scripts = document.querySelectorAll('script')
+        for (let i = 0; i < scripts.length; i++) {
+          const script = scripts[i]
+          if (script.dataset && script.dataset.file) {
+            socket.send(JSON.stringify({ file: script.dataset.file }))
+          }
+        }
+
+        // add styles to body
+        const style = document.createElement('style')
+        style.innerHTML = `      
+      /* Injected by five-server */
+      /*[data-highlight="true"] {
+        border: 1px rgb(90,170,255) solid !important;
+        background-color: rgba(155,215,255,0.5);
+        animation: fadeOutHighlight 1s forwards 0.5s;
+      }
+      img[data-highlight="true"] {
+        filter: sepia(100%) hue-rotate(180deg) saturate(200%);
+        animation: fadeOutHighlightIMG 0.5s forwards 0.5s;
+      }*/
+      @keyframes fadeOutHighlight {
+        from {background-color: rgba(155,215,255,0.5);}
+        to {background-color: rgba(155,215,255,0);}
+      }      
+      @keyframes fadeOutHighlightIMG {
+        0% {filter: sepia(100%) hue-rotate(180deg) saturate(200%);}
+        33% {filter: sepia(66%) hue-rotate(180deg) saturate(100%);}
+        50% {filter: sepia(50%) hue-rotate(90deg) saturate(50%);}
+        66% {filter: sepia(33%) hue-rotate(0deg) saturate(100%);}
+        100% {filter: sepia(0%) hue-rotate(0deg) saturate(100%);}
+      }
+      @keyframes fiveserverInfoPopup {
+        0%   {top:-40px;}
+        15%  {top:4px;}
+        85%  {top:4px;}
+        100% {top:-40px;}
+      }
+      /*smaller*/
+      @media (max-width: 640px) {
+        #fiveserver-info-wrapper {
+          max-width: 98%;
+        }
+        #fiveserver-info {
+          border-radius: 0px;
+        }      
+      }
+
+      `
+        document.head.appendChild(style)
+      }
+      socket.onclose = function (e) {
+        setTimeout(function () {
+          popup('lost connection to dev server', 'error')
+        }, 300)
+        if (attempts === 0) console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason)
+
+        setTimeout(function () {
+          attempts++
+          if (attempts > 1) console.log('connecting...')
+          if (attempts <= MAX_ATTEMPTS) connect()
+          wait = Math.floor(wait * 1.1)
+        }, wait)
+      }
+      socket.onerror = function (event) {
+        // console.error('Socket encountered error: ', event, 'Closing socket')
+        socket.close()
+      }
+    }
+
+    const MAX_STATUS_CHECK = 10
+    let statusChecks = 0
+    const reCheckStatus = () => {
+      if (statusChecks > MAX_STATUS_CHECK) {
+        console.error('[Five Server] status check failed')
+        console.log('[Five Server] browser reloads in 5 seconds')
+        setTimeout(() => {
+          window.location.reload()
+        }, 5000)
+        return
+      }
+      console.log('[Five Server] status check...')
+      setTimeout(() => {
+        checkStatus()
+      }, 1000)
+    }
+
+    const checkStatus = async () => {
+      statusChecks++
+      const p = new URL(script.src).protocol
+      const h = new URL(script.src).host
+      const baseurl = new URL(script.src).pathname.split('/').slice(0, -1).join('/')
+
+      const url = `${p}//${h}${baseurl}/fiveserver/status`
+
+      try {
+        const res = await fetch(url)
+        const json = await res.json()
+
+        if (json && json.status && json.status === 'online') {
+          connect()
+          statusChecks = 0
+        } else {
+          reCheckStatus()
+        }
+      } catch (error) {
+        reCheckStatus()
+      }
+    }
+
+    checkStatus()
+  })
+}
diff --git a/node_modules/five-server/lib/middleware/injectCode.js b/node_modules/five-server/lib/middleware/injectCode.js
index 955f273..6109ccf 100644
--- a/node_modules/five-server/lib/middleware/injectCode.js
+++ b/node_modules/five-server/lib/middleware/injectCode.js
@@ -49,6 +49,8 @@ class Inject extends stream_1.Writable {
         }
         if (this.injectTag) {
             data = data.replace(this.injectTag, this.code + this.injectTag);
+        } else { 
+            data = data + '\n' + this.code;
         }
         // convert cache to [src|href]="/.cache/.."
         const replacer = (match, p1, p2, _offset, _string) => match.replace(p1, '').replace(p2, `/.cache/${p2.replace(/^\//, '')}`);
@@ -103,13 +105,9 @@ const injectCode = (root, baseURL, PHP, injectBodyOptions) => {
             (0, fs_1.createReadStream)(filePath)
                 .pipe(inject)
                 .on('finish', () => {
-                if (!inject.injectTag)
-                    return next();
-                else {
                     res.type('html');
                     res.setHeader('Content-Length', inject.data.length);
                     res.send(inject.data);
-                }
             })
                 .on('error', () => {
                 return next();
